version: "3"

includes:
  dist: ./DistTasks.yml

tasks:
  build:
    desc: Build the project
    cmds:
      - go build -v {{.LDFLAGS}}

  test:
    desc: Run tests
    cmds:
      - task: go:test-unit
      - task: test-integration

  go:generate:
    desc: Generate Go code
    cmds:
      - go get -u "github.com/go-bindata/go-bindata/...@v3.1.1"
      - go-bindata -nocompress -nometadata -o "./internal/rule/schema/schemadata/bindata.go" --pkg schemadata --prefix "./etc/schemas/" "./etc/schemas/"
      - go-bindata -nocompress -nometadata -o "./internal/rule/schema/testdata/bindata.go" --pkg testdata --prefix "./internal/rule/schema/testdata/input/" "./internal/rule/schema/testdata/input/"
      - go get -u golang.org/x/tools/cmd/stringer@v0.0.0-20201211192254-72fbef54948b
      - go generate ./...
      - task: go:format

  go:test-unit:
    desc: Run unit tests
    cmds:
      - go test -short -run '{{ default ".*" .TEST_REGEX }}' {{ default "-v" .GOFLAGS }} -coverprofile=coverage_unit.txt {{ default .DEFAULT_GO_PACKAGES .GO_PACKAGES }}

  test-integration:
    desc: Run integration tests
    cmds:
      - task: build
      - poetry install --no-root
      - poetry run pytest test

  check:
    desc: Lint and check formatting of all files
    cmds:
      - task: go:check
      - task: python:check
      - task: docs:check
      - task: config:check
      - task: general:check-formatting
      - task: check-spelling
      - task: shell:check-mode

  lint:
    desc: Lint all files
    cmds:
      - task: go:vet
      - task: go:lint
      - task: python:lint
      - task: docs:lint
      - task: config:lint

  check-formatting:
    desc: Check formatting of all files
    cmds:
      - task: general:check-formatting

  format:
    desc: Format all files
    cmds:
      - task: go:format
      - task: python:format
      - task: general:format-prettier

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:check:
    desc: Check for problems with Go code
    deps:
      - task: go:vet
      - task: go:lint

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:vet:
    desc: Check for errors in Go code
    cmds:
      - go vet {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:fix:
    desc: Modernize usages of outdated APIs
    cmds:
      - go fix {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:lint:
    desc: Lint Go code
    cmds:
      - |
        PROJECT_PATH="$PWD"
        # `go get` and `go list` commands must be run from a temporary folder to avoid polluting go.mod
        cd "$(mktemp -d "${TMPDIR-${TMP-/tmp}}/task-temporary-XXXXX")"
        go get golang.org/x/lint/golint
        GOLINT_PATH="$(go list -f '{{"{{"}}.Target{{"}}"}}' golang.org/x/lint/golint || echo "false")"
        # `golint` must be run from the module folder
        cd "$PROJECT_PATH"
        "$GOLINT_PATH" \
          {{default "-min_confidence 0.8 -set_exit_status" .GO_LINT_FLAGS}} \
          {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-go-task/Taskfile.yml
  go:format:
    desc: Format Go code
    cmds:
      - go fmt {{default .DEFAULT_GO_PACKAGES .GO_PACKAGES}}

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:lint:
    desc: Check for problems in Markdown files
    cmds:
      - npx markdownlint-cli "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:fix:
    desc: Automatically correct linting violations in Markdown files where possible
    cmds:
      - npx markdownlint-cli --fix "**/*.md"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-markdown-task/Taskfile.yml
  markdown:check-links:
    desc: Check for broken links
    deps:
      - task: docs:generate
    cmds:
      - |
        if [[ "{{.OS}}" == "Windows_NT" ]]; then
          # npx --call uses the native shell, which makes it too difficult to use npx for this application on Windows,
          # so the Windows user is required to have markdown-link-check installed and in PATH.
          if ! which markdown-link-check &>/dev/null; then
            echo "markdown-link-check not found or not in PATH. Please install: https://github.com/tcort/markdown-link-check#readme"
            exit 1
          fi
          # Default behavior of the task on Windows is to exit the task when the first broken link causes a non-zero
          # exit status, but it's better to check all links before exiting.
          set +o errexit
          STATUS=0
          # Using -regex instead of -name to avoid Task's behavior of globbing even when quoted on Windows
          # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
          # \ characters special treatment on Windows in an attempt to support them as path separators.
          for file in $(find . -regex ".*[.]md"); do
            markdown-link-check \
              --quiet \
              --config "./.markdown-link-check.json" \
              "$file"
            STATUS=$(( $STATUS + $? ))
          done
          exit $STATUS
        else
          npx --package=markdown-link-check --call='
            STATUS=0
            for file in $(find . -regex ".*[.]md"); do
              markdown-link-check \
                --quiet \
                --config "./.markdown-link-check.json" \
                "$file"
              STATUS=$(( $STATUS + $? ))
            done
            exit $STATUS
          '
        fi

  python:check:
    cmds:
      - task: python:lint

  python:lint:
    desc: Lint Python code
    cmds:
      - poetry install --no-root
      - poetry run flake8

  python:format:
    desc: Automatically formats Python files
    cmds:
      - poetry install --no-root
      - poetry run black .

  docs:generate:
    desc: Create all generated documentation content
    deps:
      - task: docs:gen

  docs:gen:
    desc: Generate command reference
    dir: ./docsgen
    cmds:
      # docs will generate examples using os.Args[0] so we need to call
      # the generator `arduino-lint`
      - go build -o arduino-lint{{exeExt}}
      # we invoke `arduino-lint` like this instead of `./arduino-lint` to remove
      # the `./` chars from the examples
      - PATH=. arduino-lint ../docs/commands
      - task: general:format-prettier

  docs:build:
    desc: Build documentation website contents
    cmds:
      - task: docs:gen
      - poetry install --no-root
      - poetry run mkdocs build --strict

  docs:publish:
    desc: Use Mike to build and push versioned docs
    cmds:
      - task: docs:gen
      - poetry run mike deploy --update-aliases --push --remote {{.DOCS_REMOTE}} {{.DOCS_VERSION}} {{.DOCS_ALIAS}}

  docs:serve:
    desc: Run documentation website locally
    cmds:
      - task: docs:build
      - poetry run mkdocs serve

  docs:check:
    desc: Lint and check formatting of documentation files
    cmds:
      - task: markdown:lint
      - task: markdown:fix
      - task: markdown:check-links

  docs:lint:
    desc: Lint documentation files
    cmds:
      - task: docs:check-license

  docs:check-license:
    desc: Check if the license file is correctly formatted
    cmds:
      - |
        EXPECTED_LICENSE_FILE="\"LICENSE.txt\""
        EXPECTED_LICENSE_TYPE="\"GPL-3.0\"" # https://spdx.org/licenses/

        # See: https://github.com/licensee/licensee
        LICENSEE_OUTPUT="$(licensee detect --json --confidence=100)"

        DETECTED_LICENSE_FILE="$(echo "$LICENSEE_OUTPUT" | jq .matched_files[0].filename | tr --delete '\r')"
        echo "Detected license file: $DETECTED_LICENSE_FILE"
        if [ "$DETECTED_LICENSE_FILE" != "$EXPECTED_LICENSE_FILE" ]; then
          echo "ERROR: detected license file doesn't match expected: $EXPECTED_LICENSE_FILE"
          exit 1
        fi

        DETECTED_LICENSE_TYPE="$(echo "$LICENSEE_OUTPUT" | jq .matched_files[0].matched_license | tr --delete '\r')"
        echo "Detected license type: $DETECTED_LICENSE_TYPE"
        if [ "$DETECTED_LICENSE_TYPE" != "$EXPECTED_LICENSE_TYPE" ]; then
          echo "ERROR: detected license type doesn't match expected $EXPECTED_LICENSE_TYPE"
          exit 1
        fi

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:check:
    desc: Check for problems with shell scripts
    cmds:
      - |
        if ! which shellcheck &>/dev/null; then
          echo "shellcheck not installed or not in PATH. Please install: https://github.com/koalaman/shellcheck#installing"
          exit 1
        fi
      - |
        # There is something odd about shellcheck that causes the task to always exit on the first fail, despite any
        # measures that would prevent this with any other command. So it's necessary to call shellcheck only once with
        # the list of script paths as an argument. This could lead to exceeding the maximum command length on Windows if
        # the repository contained a large number of scripts, but it's unlikely to happen in reality.
        shellcheck \
          --format={{default "tty" .SHELLCHECK_FORMAT}} \
          $(
            # The odd method for escaping . in the regex is required for windows compatibility because mvdan.cc/sh gives
            # \ characters special treatment on Windows in an attempt to support them as path separators.
            find . \
              -path ".git" -prune -or \
              \( \
                -regextype posix-extended \
                -regex '.*[.](bash|sh)' -and \
                -type f \
              \)
          )

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:format:
    desc: Format shell script files
    cmds:
      - |
        if ! which shfmt &>/dev/null; then
          echo "shfmt not installed or not in PATH. Please install: https://github.com/mvdan/sh#shfmt"
          exit 1
        fi
      - shfmt -w .

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-shell-task/Taskfile.yml
  shell:check-mode:
    desc: Check for non-executable shell scripts
    cmds:
      - |
        EXIT_STATUS=0
        while read -r nonExecutableScriptPath; do
          # The while loop always runs once, even if no file was found
          if [[ "$nonExecutableScriptPath" == "" ]]; then
            continue
          fi

          echo "::error file=${nonExecutableScriptPath}::non-executable script file: $nonExecutableScriptPath";
          EXIT_STATUS=1
        done <<<"$(
          # The odd approach to escaping `.` in the regex is required for windows compatibility because mvdan.cc/sh
          # gives `\` characters special treatment on Windows in an attempt to support them as path separators.
          find . \
            -path ".git" -prune -or \
            \( \
              -regextype posix-extended \
              -regex '.*[.](bash|sh)' -and \
              -type f -and \
              -not -executable \
              -print \
            \)
        )"
        exit $EXIT_STATUS

  config:check:
    desc: Lint and check formatting of configuration files
    cmds:
      - task: config:lint

  config:lint:
    desc: Lint configuration files
    cmds:
      - task: workflow:validate

  workflow:validate:
    desc: Validate GitHub Actions workflows against JSON schema
    cmds:
      - wget --output-document={{ .WORKFLOW_SCHEMA_PATH }} https://json.schemastore.org/github-workflow
      - npx ajv-cli validate --strict=false -s {{ .WORKFLOW_SCHEMA_PATH }} -d "./.github/workflows/*.{yml,yaml}"

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-general-formatting-task/Taskfile.yml
  general:check-formatting:
    desc: Check basic formatting style of all files
    cmds:
      - |
        if ! which ec &>/dev/null; then
          echo "ec not found or not in PATH. Please install: https://github.com/editorconfig-checker/editorconfig-checker#installation"
          exit 1
        fi
      - ec

  # Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/check-prettier-formatting-task/Taskfile.yml
  general:format-prettier:
    desc: Format all supported files with Prettier
    cmds:
      - npx prettier --write .

  check-spelling:
    desc: Check for commonly misspelled words
    cmds:
      - poetry install --no-root
      - poetry run codespell {{ .CODESPELL_SKIP_OPTION }} {{ .CODESPELL_IGNORE_WORDS_OPTION }}

  correct-spelling:
    desc: Correct commonly misspelled words where possible
    cmds:
      - poetry install --no-root
      - poetry run codespell --write-changes {{ .CODESPELL_SKIP_OPTION }} {{ .CODESPELL_IGNORE_WORDS_OPTION }}

vars:
  PROJECT_NAME: "arduino-lint"
  DIST_DIR: "dist"
  DEFAULT_GO_PACKAGES:
    sh: echo `go list ./... | grep --invert-match 'github.com/arduino/arduino-lint/internal/rule/schema/schemadata' | tr '\n' ' '`
  # build vars
  COMMIT:
    sh: echo "$(git log -n 1 --format=%h)"
  TIMESTAMP:
    sh: echo "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  TIMESTAMP_SHORT:
    sh: echo "{{now | date "20060102"}}"
  TAG:
    sh: echo "`git tag --points-at=HEAD 2> /dev/null`"
  VERSION: "{{ if .NIGHTLY }}nightly-{{ .TIMESTAMP_SHORT }}{{ else if .TAG }}{{ .TAG }}{{ else }}snapshot{{ end }}"
  CONFIGURATION_PACKAGE: "github.com/arduino/{{ .PROJECT_NAME }}/internal/configuration"
  LDFLAGS: >-
    -ldflags
    '
    -X {{ .CONFIGURATION_PACKAGE }}.version={{.VERSION}}
    -X {{ .CONFIGURATION_PACKAGE }}.commit={{.COMMIT}}
    -X {{ .CONFIGURATION_PACKAGE }}.buildTimestamp={{.TIMESTAMP}}
    '
  GOFLAGS: "-timeout 10m -v -coverpkg=./... -covermode=atomic"
  DOCS_VERSION: dev
  DOCS_ALIAS: ""
  DOCS_REMOTE: "origin"

  PRETTIER: prettier@2.1.2

  WORKFLOW_SCHEMA_PATH: "$(mktemp -t gha-workflow-schema-XXXXXXXXXX.json)"

  CODESPELL_SKIP_OPTION: '--skip "./.git,go.mod,go.sum,./arduino-lint,./arduino-lint.exe,./internal/rule/rulefunction/testdata/libraries/MisspelledSentenceParagraphValue/library.properties,./site"'
  CODESPELL_IGNORE_WORDS_OPTION: "--ignore-words ./etc/codespell-ignore-words-list.txt"
