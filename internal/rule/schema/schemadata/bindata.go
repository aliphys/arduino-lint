// Package schemadata Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// etc/schemas/arduino-boards-txt-definitions-schema.json
// etc/schemas/arduino-boards-txt-permissive-schema.json
// etc/schemas/arduino-boards-txt-schema.json
// etc/schemas/arduino-boards-txt-strict-schema.json
// etc/schemas/arduino-library-properties-definitions-schema.json
// etc/schemas/arduino-library-properties-permissive-schema.json
// etc/schemas/arduino-library-properties-schema.json
// etc/schemas/arduino-library-properties-strict-schema.json
// etc/schemas/general-definitions-schema.json
package schemadata

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _arduinoBoardsTxtDefinitionsSchemaJson = []byte(`{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/schemas/arduino-boards-txt-definitions-schema.json",
  "title": "Shared definitions for the Arduino boards.txt schemas",
  "definitions": {
    "propertiesObjects": {
      "menu": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "object"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/menu/base/object"
              },
              {
                "patternProperties": {
                  "^.+$": {
                    "$ref": "#/definitions/propertiesObjects/menuMenuID/permissive/object"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/menu/base/object"
              },
              {
                "patternProperties": {
                  "^.+$": {
                    "$ref": "#/definitions/propertiesObjects/menuMenuID/specification/object"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/menu/base/object"
              },
              {
                "patternProperties": {
                  ".+": {
                    "$ref": "#/definitions/propertiesObjects/menuMenuID/permissive/object"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        }
      },
      "menuMenuID": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/menuMenuID/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/menuMenuID/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/menuMenuID/base/object"
              }
            ]
          }
        }
      },
      "boardID": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "object"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardID/base/object"
              },
              {
                "properties": {
                  "name": {
                    "$ref": "#/definitions/propertiesObjects/boardIDName/permissive/object"
                  },
                  "build.board": {
                    "$ref": "#/definitions/propertiesObjects/boardIDBuildBoard/permissive/object"
                  },
                  "build.core": {
                    "$ref": "#/definitions/propertiesObjects/boardIDBuildCore/permissive/object"
                  },
                  "debug.tool": {
                    "$ref": "#/definitions/propertiesObjects/boardIDDebugTool/permissive/object"
                  },
                  "hide": {
                    "$ref": "#/definitions/propertiesObjects/boardIDHide/permissive/object"
                  },
                  "serial.disableDTR": {
                    "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableDTR/permissive/object"
                  },
                  "serial.disableRTS": {
                    "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableRTS/permissive/object"
                  },
                  "upload.maximum_size": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumSize/permissive/object"
                  },
                  "upload.maximum_data_size": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumDataSize/permissive/object"
                  },
                  "upload.protocol": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadProtocol/permissive/object"
                  },
                  "upload.tool": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadTool/permissive/object"
                  },
                  "upload.use_1200bps_touch": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadUse1200bpsTouch/permissive/object"
                  },
                  "upload.wait_for_upload_port": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadWaitForUploadPort/permissive/object"
                  }
                }
              },
              {
                "patternProperties": {
                  "menu\\..+\\..+$": {
                    "$ref": "#/definitions/propertiesObjects/boardIDMenuMenuIDOptionID/permissive/object"
                  },
                  "^[vp]id\\.[0-9]+$": {
                    "$ref": "#/definitions/propertiesObjects/boardIDXidN/permissive/object"
                  }
                }
              },
              {
                "$ref": "#/definitions/propertyNamesObjects/permissive/object"
              },
              {
                "$ref": "#/definitions/requiredObjects/boardID/permissive/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardID/base/object"
              },
              {
                "properties": {
                  "name": {
                    "$ref": "#/definitions/propertiesObjects/boardIDName/specification/object"
                  },
                  "build.board": {
                    "$ref": "#/definitions/propertiesObjects/boardIDBuildBoard/specification/object"
                  },
                  "build.core": {
                    "$ref": "#/definitions/propertiesObjects/boardIDBuildCore/specification/object"
                  },
                  "debug.tool": {
                    "$ref": "#/definitions/propertiesObjects/boardIDDebugTool/specification/object"
                  },
                  "hide": {
                    "$ref": "#/definitions/propertiesObjects/boardIDHide/specification/object"
                  },
                  "serial.disableDTR": {
                    "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableDTR/specification/object"
                  },
                  "serial.disableRTS": {
                    "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableRTS/specification/object"
                  },
                  "upload.maximum_size": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumSize/specification/object"
                  },
                  "upload.maximum_data_size": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumDataSize/specification/object"
                  },
                  "upload.protocol": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadProtocol/specification/object"
                  },
                  "upload.tool": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadTool/specification/object"
                  },
                  "upload.use_1200bps_touch": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadUse1200bpsTouch/specification/object"
                  },
                  "upload.wait_for_upload_port": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadWaitForUploadPort/specification/object"
                  }
                }
              },
              {
                "patternProperties": {
                  "menu\\..+\\..+$": {
                    "$ref": "#/definitions/propertiesObjects/boardIDMenuMenuIDOptionID/specification/object"
                  },
                  "^[vp]id\\.[0-9]+$": {
                    "$ref": "#/definitions/propertiesObjects/boardIDXidN/specification/object"
                  }
                }
              },
              {
                "$ref": "#/definitions/propertyNamesObjects/specification/object"
              },
              {
                "$ref": "#/definitions/requiredObjects/boardID/specification/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardID/base/object"
              },
              {
                "properties": {
                  "name": {
                    "$ref": "#/definitions/propertiesObjects/boardIDName/strict/object"
                  },
                  "build.board": {
                    "$ref": "#/definitions/propertiesObjects/boardIDBuildBoard/strict/object"
                  },
                  "build.core": {
                    "$ref": "#/definitions/propertiesObjects/boardIDBuildCore/strict/object"
                  },
                  "debug.tool": {
                    "$ref": "#/definitions/propertiesObjects/boardIDDebugTool/strict/object"
                  },
                  "hide": {
                    "$ref": "#/definitions/propertiesObjects/boardIDHide/strict/object"
                  },
                  "serial.disableDTR": {
                    "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableDTR/strict/object"
                  },
                  "serial.disableRTS": {
                    "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableRTS/strict/object"
                  },
                  "upload.maximum_size": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumSize/strict/object"
                  },
                  "upload.maximum_data_size": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumDataSize/strict/object"
                  },
                  "upload.protocol": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadProtocol/strict/object"
                  },
                  "upload.tool": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadTool/strict/object"
                  },
                  "upload.use_1200bps_touch": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadUse1200bpsTouch/strict/object"
                  },
                  "upload.wait_for_upload_port": {
                    "$ref": "#/definitions/propertiesObjects/boardIDUploadWaitForUploadPort/strict/object"
                  }
                }
              },
              {
                "patternProperties": {
                  "menu\\..+\\..+$": {
                    "$ref": "#/definitions/propertiesObjects/boardIDMenuMenuIDOptionID/strict/object"
                  },
                  "^[vp]id\\.[0-9]+$": {
                    "$ref": "#/definitions/propertiesObjects/boardIDXidN/strict/object"
                  }
                }
              },
              {
                "$ref": "#/definitions/propertyNamesObjects/strict/object"
              },
              {
                "$ref": "#/definitions/requiredObjects/boardID/strict/object"
              }
            ]
          }
        }
      },
      "boardIDName": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDName/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDName/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDName/base/object"
              }
            ]
          }
        }
      },
      "boardIDBuildBoard": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDBuildBoard/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDBuildBoard/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDBuildBoard/base/object"
              }
            ]
          }
        }
      },
      "boardIDBuildCore": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDBuildBoard/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDBuildBoard/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDBuildBoard/base/object"
              }
            ]
          }
        }
      },
      "boardIDDebugTool": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDDebugTool/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDDebugTool/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDDebugTool/base/object"
              }
            ]
          }
        }
      },
      "boardIDHide": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDHide/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDHide/base/object"
              },
              {
                "enum": [""]
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDHide/specification/object"
              }
            ]
          }
        }
      },
      "boardIDMenuMenuIDOptionID": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDMenuMenuIDOptionID/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDMenuMenuIDOptionID/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDMenuMenuIDOptionID/base/object"
              }
            ]
          }
        }
      },
      "boardIDSerialDisableDTR": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/enumObjects/booleanString"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableDTR/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableDTR/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableDTR/base/object"
              }
            ]
          }
        }
      },
      "boardIDSerialDisableRTS": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/enumObjects/booleanString"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableRTS/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableRTS/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDSerialDisableRTS/base/object"
              }
            ]
          }
        }
      },
      "boardIDUploadMaximumSize": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "pattern": "^[0-9]+$"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumSize/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumSize/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumSize/base/object"
              }
            ]
          }
        }
      },
      "boardIDUploadMaximumDataSize": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "pattern": "^[0-9]+$"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumDataSize/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumDataSize/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadMaximumDataSize/base/object"
              }
            ]
          }
        }
      },
      "boardIDUploadProtocol": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadProtocol/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadProtocol/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadProtocol/base/object"
              }
            ]
          }
        }
      },
      "boardIDUploadTool": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadTool/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadTool/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadTool/base/object"
              }
            ]
          }
        }
      },
      "boardIDUploadUse1200bpsTouch": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/enumObjects/booleanString"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadUse1200bpsTouch/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadUse1200bpsTouch/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadUse1200bpsTouch/base/object"
              }
            ]
          }
        }
      },
      "boardIDUploadWaitForUploadPort": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/enumObjects/booleanString"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadWaitForUploadPort/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadWaitForUploadPort/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDUploadWaitForUploadPort/base/object"
              }
            ]
          }
        }
      },
      "boardIDXidN": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "pattern": "^0[xX][0-9a-fA-F]{4}$"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDXidN/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDXidN/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/boardIDXidN/base/object"
              }
            ]
          }
        }
      }
    },
    "propertyNamesObjects": {
      "base": {
        "object": {}
      },
      "permissive": {
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/propertyNamesObjects/base/object"
            }
          ]
        }
      },
      "specification": {
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/propertyNamesObjects/base/object"
            }
          ]
        }
      },
      "strict": {
        "definitions": {
          "userExtraFlagsProperties": {
            "propertyNames": {
              "not": {
                "pattern": "^compiler\\.((c)|(c\\.elf)|(S)|(cpp)|(ar)|(objcopy.eep)|(elf2hex))\\.extra_flags$"
              }
            }
          }
        },
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/propertyNamesObjects/base/object"
            },
            {
              "$ref": "#/definitions/propertyNamesObjects/strict/definitions/userExtraFlagsProperties"
            }
          ]
        }
      }
    },
    "requiredObjects": {
      "boardID": {
        "base": {
          "object": {
            "allOf": [
              {
                "required": ["name", "build.core", "upload.tool"]
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/requiredObjects/boardID/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/requiredObjects/boardID/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/requiredObjects/boardID/base/object"
              },
              {
                "required": ["build.board", "upload.maximum_size", "upload.maximum_data_size"]
              }
            ]
          }
        }
      }
    },
    "enumObjects": {
      "booleanString": {
        "enum": ["true", "false"]
      }
    }
  }
}
`)

func arduinoBoardsTxtDefinitionsSchemaJsonBytes() ([]byte, error) {
	return _arduinoBoardsTxtDefinitionsSchemaJson, nil
}

func arduinoBoardsTxtDefinitionsSchemaJson() (*asset, error) {
	bytes, err := arduinoBoardsTxtDefinitionsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arduino-boards-txt-definitions-schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _arduinoBoardsTxtPermissiveSchemaJson = []byte(`{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/schemas/arduino-boards-txt-permissive-schema.json",
  "title": "Arduino boards.txt JSON permissive schema",
  "description": "boards.txt contains the boards definitions of Arduino platforms. See: https://arduino.github.io/arduino-cli/latest/platform-specification/#boardstxt",
  "$comment": "For information on the boards.txt format, see https://godoc.org/github.com/arduino/go-properties-orderedmap",
  "type": "object",
  "properties": {
    "menu": {
      "$ref": "arduino-boards-txt-definitions-schema.json#/definitions/propertiesObjects/menu/permissive/object"
    }
  },
  "patternProperties": {
    "^([^m].*|m([^e].*)?|me([^n].*)?|men([^u].*)?|menu.+)$": {
      "$ref": "arduino-boards-txt-definitions-schema.json#/definitions/propertiesObjects/boardID/permissive/object"
    }
  }
}
`)

func arduinoBoardsTxtPermissiveSchemaJsonBytes() ([]byte, error) {
	return _arduinoBoardsTxtPermissiveSchemaJson, nil
}

func arduinoBoardsTxtPermissiveSchemaJson() (*asset, error) {
	bytes, err := arduinoBoardsTxtPermissiveSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arduino-boards-txt-permissive-schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _arduinoBoardsTxtSchemaJson = []byte(`{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/schemas/arduino-boards-txt-schema.json",
  "title": "Arduino boards.txt JSON schema",
  "description": "boards.txt contains the boards definitions of Arduino platforms. See: https://arduino.github.io/arduino-cli/latest/platform-specification/#boardstxt",
  "$comment": "For information on the boards.txt format, see https://godoc.org/github.com/arduino/go-properties-orderedmap",
  "type": "object",
  "properties": {
    "menu": {
      "$ref": "arduino-boards-txt-definitions-schema.json#/definitions/propertiesObjects/menu/specification/object"
    }
  },
  "patternProperties": {
    "^([^m].*|m([^e].*)?|me([^n].*)?|men([^u].*)?|menu.+)$": {
      "$ref": "arduino-boards-txt-definitions-schema.json#/definitions/propertiesObjects/boardID/specification/object"
    }
  }
}
`)

func arduinoBoardsTxtSchemaJsonBytes() ([]byte, error) {
	return _arduinoBoardsTxtSchemaJson, nil
}

func arduinoBoardsTxtSchemaJson() (*asset, error) {
	bytes, err := arduinoBoardsTxtSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arduino-boards-txt-schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _arduinoBoardsTxtStrictSchemaJson = []byte(`{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/schemas/arduino-boards-txt-strict-schema.json",
  "title": "Arduino boards.txt JSON strict schema",
  "description": "boards.txt contains the boards definitions of Arduino platforms. See: https://arduino.github.io/arduino-cli/latest/platform-specification/#boardstxt",
  "$comment": "For information on the boards.txt format, see https://godoc.org/github.com/arduino/go-properties-orderedmap",
  "type": "object",
  "properties": {
    "menu": {
      "$ref": "arduino-boards-txt-definitions-schema.json#/definitions/propertiesObjects/menu/strict/object"
    }
  },
  "patternProperties": {
    "^([^m].*|m([^e].*)?|me([^n].*)?|men([^u].*)?|menu.+)$": {
      "$ref": "arduino-boards-txt-definitions-schema.json#/definitions/propertiesObjects/boardID/strict/object"
    }
  }
}
`)

func arduinoBoardsTxtStrictSchemaJsonBytes() ([]byte, error) {
	return _arduinoBoardsTxtStrictSchemaJson, nil
}

func arduinoBoardsTxtStrictSchemaJson() (*asset, error) {
	bytes, err := arduinoBoardsTxtStrictSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arduino-boards-txt-strict-schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _arduinoLibraryPropertiesDefinitionsSchemaJson = []byte(`{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/schemas/arduino-library-properties-definitions-schema.json",
  "title": "Shared definitions for the Arduino library.properties schemas",
  "type": "object",
  "definitions": {
    "general": {
      "patternObjects": {
        "notStartsWithArduino": {
          "not": {
            "pattern": "^[aA][rR][dD][uU][iI][nN][oO].*$"
          }
        }
      }
    },
    "propertiesObjects": {
      "name": {
        "base": {
          "definitions": {
            "patternObjects": {
              "allowedCharacters": {
                "allOf": [
                  {
                    "$ref": "#/definitions/propertiesObjects/depends/base/definitions/patternObject"
                  },
                  {
                    "not": {
                      "$comment": "The depends property is a comma separated list of names, so a valid name pattern is a valid depends pattern with the comma excluded",
                      "pattern": "^.*,.*$"
                    }
                  }
                ]
              }
            }
          },
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              },
              {
                "$ref": "#/definitions/propertiesObjects/name/base/definitions/patternObjects/allowedCharacters"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/name/base/object"
              },
              {
                "maxLength": 63
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/name/base/object"
              },
              {
                "maxLength": 63
              },
              {
                "$comment": "Only official Arduino libraries are allowed to have names starting with \"Arduino\"",
                "$ref": "#/definitions/general/patternObjects/notStartsWithArduino"
              }
            ]
          }
        },
        "strict": {
          "definitions": {
            "patternObjects": {
              "notContainsSpaces": {
                "not": {
                  "pattern": "^.* .*$"
                }
              },
              "notContainsArduino": {
                "not": {
                  "pattern": "^.+[aA][rR][dD][uU][iI][nN][oO].*$"
                }
              },
              "notContainsSuperfluousTerms": {
                "not": {
                  "pattern": "^.*[lL][iI][bB][rR][aA][rR][yY].*$"
                }
              }
            }
          },
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/name/specification/object"
              },
              {
                "maxLength": 16
              },
              {
                "$ref": "#/definitions/propertiesObjects/name/strict/definitions/patternObjects/notContainsSpaces"
              },
              {
                "$ref": "#/definitions/propertiesObjects/name/strict/definitions/patternObjects/notContainsArduino"
              },
              {
                "$ref": "#/definitions/propertiesObjects/name/strict/definitions/patternObjects/notContainsSuperfluousTerms"
              }
            ]
          }
        }
      },
      "version": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/version/base/object"
              },
              {
                "$ref": "general-definitions-schema.json#/definitions/patternObjects/relaxedSemver"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/version/base/object"
              },
              {
                "$ref": "general-definitions-schema.json#/definitions/patternObjects/relaxedSemver"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/version/base/object"
              },
              {
                "$ref": "general-definitions-schema.json#/definitions/patternObjects/semver"
              }
            ]
          }
        }
      },
      "author": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/author/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/author/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/author/specification/object"
              }
            ]
          }
        }
      },
      "maintainer": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/maintainer/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/maintainer/base/object"
              },
              {
                "$comment": "Only official Arduino libraries are allowed to have maintainer field starting with \"Arduino\"",
                "$ref": "#/definitions/general/patternObjects/notStartsWithArduino"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/maintainer/specification/object"
              }
            ]
          }
        }
      },
      "email": {
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/maintainer/permissive/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/maintainer/specification/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/maintainer/strict/object"
              }
            ]
          }
        }
      },
      "sentence": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/sentence/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/sentence/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/sentence/specification/object"
              }
            ]
          }
        }
      },
      "paragraph": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/paragraph/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/paragraph/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/paragraph/specification/object"
              }
            ]
          }
        }
      },
      "category": {
        "base": {
          "definitions": {
            "enumObject": {
              "enum": [
                "Display",
                "Communication",
                "Signal Input/Output",
                "Sensors",
                "Device Control",
                "Timing",
                "Data Storage",
                "Data Processing",
                "Other"
              ]
            }
          },
          "object": {}
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/category/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/category/base/object"
              },
              {
                "$ref": "#/definitions/propertiesObjects/category/base/definitions/enumObject"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/category/specification/object"
              }
            ]
          }
        }
      },
      "url": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/url/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/url/base/object"
              },
              {
                "format": "uri"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/url/specification/object"
              }
            ]
          }
        }
      },
      "architectures": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/architectures/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/architectures/base/object"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/architectures/specification/object"
              }
            ]
          }
        }
      },
      "depends": {
        "base": {
          "definitions": {
            "patternObject": {
              "pattern": "^(([a-zA-Z][a-zA-Z0-9 _\\.\\-,]*)|([0-9][a-zA-Z0-9 _\\.\\-]*[a-zA-Z][a-zA-Z0-9 _\\.\\-,]*))*$"
            }
          },
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/definitions/propertiesObjects/depends/base/definitions/patternObject"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/depends/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/depends/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/depends/specification/object"
              }
            ]
          }
        }
      },
      "dot_a_linkage": {
        "base": {
          "object": {
            "allOf": [
              {
                "enum": ["true", "false"]
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/dot_a_linkage/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/dot_a_linkage/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/dot_a_linkage/specification/object"
              }
            ]
          }
        }
      },
      "includes": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              },
              {
                "minLength": 1
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/sentence/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/sentence/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/sentence/specification/object"
              }
            ]
          }
        }
      },
      "precompiled": {
        "base": {
          "object": {
            "allOf": [
              {
                "enum": ["true", "full", "false"]
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/precompiled/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/precompiled/base/object"
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/precompiled/specification/object"
              }
            ]
          }
        }
      },
      "ldflags": {
        "base": {
          "object": {
            "allOf": [
              {
                "type": "string"
              }
            ]
          }
        },
        "permissive": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/ldflags/base/object"
              }
            ]
          }
        },
        "specification": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/ldflags/base/object"
              },
              {
                "$comment": "Minimum length for a valid -l option",
                "minLength": 3
              }
            ]
          }
        },
        "strict": {
          "object": {
            "allOf": [
              {
                "$ref": "#/definitions/propertiesObjects/ldflags/specification/object"
              }
            ]
          }
        }
      }
    },
    "propertyNamesObjects": {
      "base": {
        "object": {}
      },
      "permissive": {
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/propertyNamesObjects/base/object"
            }
          ]
        }
      },
      "specification": {
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/propertyNamesObjects/base/object"
            }
          ]
        }
      },
      "strict": {
        "definitions": {
          "propertyNamesObjects": {
            "misspelledOptionalProperties": {
              "propertyNames": {
                "$comment": "Misspelled optional property names",
                "allOf": [
                  {
                    "not": {
                      "pattern": "^[dD][eE][pP][eE][nN][dD]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^D[eE][pP][eE][nN][dD][sS]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^[dD][oO][tT][_-]?[aA][_-]?[lL][iI][nN][kK][aA][gG][eE][sS]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^[dD][oO][tT]-?[aA]-?[lL][iI][nN][kK][aA][gG][eE]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^D[oO][tT]_[aA]_[lL][iI][nN][kK][aA][gG][eE]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^[iI][nN][cC][lL][uU][dD][eE]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^I[nN][cC][lL][uU][dD][eE][sS]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^[pP][rR][eE][-_]?[cC][oO][mM][pP][iI][lL][eE]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^[pP][rR][eE][-_][cC][oO][mM][pP][iI][lL][eE][dD]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^P[rR][eE][-_]?[cC][oO][mM][pP][iI][lL][eE][dD]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^[lL][dD][-_]?[fF][lL][aA][gG]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^[lL][dD][-_][fF][lL][aA][gG][sS]$"
                    }
                  },
                  {
                    "not": {
                      "pattern": "^L[dD][-_]?[fF][lL][aA][gG][sS]$"
                    }
                  }
                ]
              }
            }
          }
        },
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/propertyNamesObjects/strict/definitions/propertyNamesObjects/misspelledOptionalProperties"
            },
            {
              "$ref": "#/definitions/propertyNamesObjects/specification/object"
            }
          ]
        }
      }
    },
    "requiredObjects": {
      "base": {
        "object": {
          "allOf": [
            {
              "required": ["name", "version", "author", "sentence", "paragraph", "url"]
            }
          ]
        }
      },
      "permissive": {
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/requiredObjects/base/object"
            },
            {
              "$comment": "The original draft of the library specification had an \"email\" field. This was later changed to \"maintainer\" and \"email\" is now deprecated",
              "anyOf": [
                {
                  "required": ["maintainer"]
                },
                {
                  "required": ["email"]
                }
              ]
            }
          ]
        }
      },
      "specification": {
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/requiredObjects/base/object"
            },
            {
              "required": ["maintainer"]
            }
          ]
        }
      },
      "strict": {
        "object": {
          "allOf": [
            {
              "$ref": "#/definitions/requiredObjects/specification/object"
            },
            {
              "required": ["category", "architectures"]
            }
          ]
        }
      }
    }
  }
}
`)

func arduinoLibraryPropertiesDefinitionsSchemaJsonBytes() ([]byte, error) {
	return _arduinoLibraryPropertiesDefinitionsSchemaJson, nil
}

func arduinoLibraryPropertiesDefinitionsSchemaJson() (*asset, error) {
	bytes, err := arduinoLibraryPropertiesDefinitionsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arduino-library-properties-definitions-schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _arduinoLibraryPropertiesPermissiveSchemaJson = []byte(`{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/schemas/arduino-library-properties-permissive-schema.json",
  "title": "Arduino library.properties JSON permissive schema",
  "description": "library.properties is the metadata file for Arduino libraries. This schema defines the minimum requirements for this file. See: https://arduino.github.io/arduino-cli/latest/library-specification/#library-metadata",
  "$comment": "For information on the Arduino library.properties format, see https://godoc.org/github.com/arduino/go-properties-orderedmap",
  "type": "object",
  "properties": {
    "name": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/name/permissive/object"
    },
    "version": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/version/permissive/object"
    },
    "author": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/author/permissive/object"
    },
    "maintainer": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/maintainer/permissive/object"
    },
    "email": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/email/permissive/object"
    },
    "sentence": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/sentence/permissive/object"
    },
    "paragraph": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/paragraph/permissive/object"
    },
    "category": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/category/permissive/object"
    },
    "url": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/url/permissive/object"
    },
    "architectures": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/architectures/permissive/object"
    },
    "dot_a_linkage": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/dot_a_linkage/permissive/object"
    },
    "depends": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/depends/permissive/object"
    },
    "includes": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/includes/permissive/object"
    },
    "precompiled": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/precompiled/permissive/object"
    },
    "ldflags": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/ldflags/permissive/object"
    }
  },
  "allOf": [
    {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertyNamesObjects/permissive/object"
    },
    {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/requiredObjects/permissive/object"
    }
  ]
}
`)

func arduinoLibraryPropertiesPermissiveSchemaJsonBytes() ([]byte, error) {
	return _arduinoLibraryPropertiesPermissiveSchemaJson, nil
}

func arduinoLibraryPropertiesPermissiveSchemaJson() (*asset, error) {
	bytes, err := arduinoLibraryPropertiesPermissiveSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arduino-library-properties-permissive-schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _arduinoLibraryPropertiesSchemaJson = []byte(`{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/schemas/arduino-library-properties-schema.json",
  "title": "Arduino library.properties JSON schema",
  "description": "library.properties is the metadata file for Arduino libraries. See: https://arduino.github.io/arduino-cli/latest/library-specification/#library-metadata",
  "$comment": "For information on the Arduino library.properties format, see https://godoc.org/github.com/arduino/go-properties-orderedmap",
  "type": "object",
  "properties": {
    "name": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/name/specification/object"
    },
    "version": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/version/specification/object"
    },
    "author": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/author/specification/object"
    },
    "maintainer": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/maintainer/specification/object"
    },
    "email": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/email/specification/object"
    },
    "sentence": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/sentence/specification/object"
    },
    "paragraph": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/paragraph/specification/object"
    },
    "category": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/category/specification/object"
    },
    "url": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/url/specification/object"
    },
    "architectures": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/architectures/specification/object"
    },
    "dot_a_linkage": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/dot_a_linkage/specification/object"
    },
    "depends": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/depends/specification/object"
    },
    "includes": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/includes/specification/object"
    },
    "precompiled": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/precompiled/specification/object"
    },
    "ldflags": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/ldflags/specification/object"
    }
  },
  "allOf": [
    {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertyNamesObjects/specification/object"
    },
    {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/requiredObjects/specification/object"
    }
  ]
}
`)

func arduinoLibraryPropertiesSchemaJsonBytes() ([]byte, error) {
	return _arduinoLibraryPropertiesSchemaJson, nil
}

func arduinoLibraryPropertiesSchemaJson() (*asset, error) {
	bytes, err := arduinoLibraryPropertiesSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arduino-library-properties-schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _arduinoLibraryPropertiesStrictSchemaJson = []byte(`{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/schemas/arduino-library-properties-strict-schema.json",
  "title": "Arduino library.properties strict JSON schema",
  "description": "library.properties is the metadata file for Arduino libraries. This schema defines the recommended format. See: https://arduino.github.io/arduino-cli/latest/library-specification/#library-metadata",
  "$comment": "For information on the Arduino library.properties format, see https://godoc.org/github.com/arduino/go-properties-orderedmap",
  "type": "object",
  "properties": {
    "name": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/name/strict/object"
    },
    "version": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/version/strict/object"
    },
    "author": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/author/strict/object"
    },
    "maintainer": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/maintainer/strict/object"
    },
    "email": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/email/strict/object"
    },
    "sentence": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/sentence/strict/object"
    },
    "paragraph": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/paragraph/strict/object"
    },
    "category": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/category/strict/object"
    },
    "url": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/url/strict/object"
    },
    "architectures": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/architectures/strict/object"
    },
    "dot_a_linkage": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/dot_a_linkage/strict/object"
    },
    "depends": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/depends/strict/object"
    },
    "includes": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/includes/strict/object"
    },
    "precompiled": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/precompiled/strict/object"
    },
    "ldflags": {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertiesObjects/ldflags/strict/object"
    }
  },
  "allOf": [
    {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/propertyNamesObjects/strict/object"
    },
    {
      "$ref": "arduino-library-properties-definitions-schema.json#/definitions/requiredObjects/strict/object"
    }
  ]
}
`)

func arduinoLibraryPropertiesStrictSchemaJsonBytes() ([]byte, error) {
	return _arduinoLibraryPropertiesStrictSchemaJson, nil
}

func arduinoLibraryPropertiesStrictSchemaJson() (*asset, error) {
	bytes, err := arduinoLibraryPropertiesStrictSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "arduino-library-properties-strict-schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generalDefinitionsSchemaJson = []byte(`{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/arduino/arduino-lint/main/etc/schemas/general-definitions-schema.json",
  "title": "Shared definitions",
  "description": "Definitions for use in schemas.",
  "type": "object",
  "definitions": {
    "patternObjects": {
      "semver": {
        "$comment": "https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string with unused non-capturing group syntax removed.",
        "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(-((0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\\+([0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*))?$"
      },
      "relaxedSemver": {
        "$comment": "https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string adjusted to also allow MAJOR.MINOR, MAJOR, and with unused non-capturing group syntax removed. For details, see https://go.bug.st/relaxed-semver",
        "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*))?(\\.(0|[1-9]\\d*))?(-((0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\.(0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\\+([0-9a-zA-Z-]+(\\.[0-9a-zA-Z-]+)*))?$"
      }
    }
  }
}
`)

func generalDefinitionsSchemaJsonBytes() ([]byte, error) {
	return _generalDefinitionsSchemaJson, nil
}

func generalDefinitionsSchemaJson() (*asset, error) {
	bytes, err := generalDefinitionsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "general-definitions-schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"arduino-boards-txt-definitions-schema.json":         arduinoBoardsTxtDefinitionsSchemaJson,
	"arduino-boards-txt-permissive-schema.json":          arduinoBoardsTxtPermissiveSchemaJson,
	"arduino-boards-txt-schema.json":                     arduinoBoardsTxtSchemaJson,
	"arduino-boards-txt-strict-schema.json":              arduinoBoardsTxtStrictSchemaJson,
	"arduino-library-properties-definitions-schema.json": arduinoLibraryPropertiesDefinitionsSchemaJson,
	"arduino-library-properties-permissive-schema.json":  arduinoLibraryPropertiesPermissiveSchemaJson,
	"arduino-library-properties-schema.json":             arduinoLibraryPropertiesSchemaJson,
	"arduino-library-properties-strict-schema.json":      arduinoLibraryPropertiesStrictSchemaJson,
	"general-definitions-schema.json":                    generalDefinitionsSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"arduino-boards-txt-definitions-schema.json":         &bintree{arduinoBoardsTxtDefinitionsSchemaJson, map[string]*bintree{}},
	"arduino-boards-txt-permissive-schema.json":          &bintree{arduinoBoardsTxtPermissiveSchemaJson, map[string]*bintree{}},
	"arduino-boards-txt-schema.json":                     &bintree{arduinoBoardsTxtSchemaJson, map[string]*bintree{}},
	"arduino-boards-txt-strict-schema.json":              &bintree{arduinoBoardsTxtStrictSchemaJson, map[string]*bintree{}},
	"arduino-library-properties-definitions-schema.json": &bintree{arduinoLibraryPropertiesDefinitionsSchemaJson, map[string]*bintree{}},
	"arduino-library-properties-permissive-schema.json":  &bintree{arduinoLibraryPropertiesPermissiveSchemaJson, map[string]*bintree{}},
	"arduino-library-properties-schema.json":             &bintree{arduinoLibraryPropertiesSchemaJson, map[string]*bintree{}},
	"arduino-library-properties-strict-schema.json":      &bintree{arduinoLibraryPropertiesStrictSchemaJson, map[string]*bintree{}},
	"general-definitions-schema.json":                    &bintree{generalDefinitionsSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
